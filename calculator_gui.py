from tkinter import *
import tkinter.font as font
import math
root = Tk()
root.title("calculator")
root.geometry("538x530")

## frame for left and right parenthesis
f1 = Frame(root)

global is_dot_there
is_dot_there = False

## creating entry display
myFont = font.Font(size=16)
t = Text(root, width=42,height=3, borderwidth=5, font=myFont)
t.grid(row=0 , column=0, columnspan=4, padx=10, pady=10)



###################################################################################
#### function to convert infix expression to postfix expression
def pr(elem):
    if elem == '#': return 0
    elif elem == '(': return 1
    elif elem == '+': return 2
    elif elem == '-': return 2
    elif elem == '*': return 3
    elif elem == '/': return 3
    elif elem == '%': return 3
    elif elem == '^': return 4

def infx_to_pofx(s):
    stack = ['#']
    num_list = []
    temp = ""

    for i in s:
        if i == '(':
            if temp != "":
                num_list.append(float(temp))
                temp=""
            stack.append(i)
        elif (i.isdigit() or i == '.'):
            temp += i
        elif i == ')':
            if temp != "":
                num_list.append(float(temp))
                temp=""
            while (stack[-1] != '('):
                num_list.append(str(stack.pop()))
            popped = stack.pop()  
        else:
            if temp != "":
                num_list.append(float(temp))
                temp=""
            while (pr(stack[-1]) >= pr(i)):
                num_list.append(str(stack.pop())) 
            stack.append(str(i))

    if temp != "":
        num_list.append(float(temp))
        temp=""
    while (stack[-1] != '#'):
        num_list.append(str(stack.pop())) 

    return num_list


## function to evaluate the postfix expression generated by above function
def pofx_evaluate(s):
    stack = []
    try:
        for i in s:     
            if i in ['+', '-', '*', '/', '^', '%']:
                operator = i
                op2 = float(stack.pop())
                op1 = float(stack.pop())
                if i == '+':
                    result = op1 + op2
                elif i == '-':
                    result = op1 - op2
                elif i == '*':
                    result = op1 * op2
                elif i == '/':
                    result = op1 / op2
                elif i == '^':   
                    result = op1 ** op2
                elif i == '%':
                    result = (op1 * op2)/100    
                stack.append(result)
            else:
                stack.append(float(i))
    except IndexError:
        return "Error"
    return stack[-1]


## function to display the entered input
## is_dot_there is initially set to False
def on_Click(number):
    global is_dot_there
    val = t.get(1.0, END)
    if(number == "." and (is_dot_there)): return
    t.insert(END, str(number))
    if str(number) == '.':
        is_dot_there = True
    if str(number) in ['+', '-', '*', '/', '^', '%']:
        is_dot_there = False    

## function for backspace button
def function_backspace():
    val = t.get(1.0, END)
    val = val[:-2]
    t.delete(1.0, END)
    t.insert(END , val)

## function for CLR button
def clear():
    t.delete(1.0, END)
    global f_num
    f_num = 0

## function for = button and evaluating results
def button_equal():
    expression = t.get(1.0, END)
    t.insert(END, '\n= ')
    res = pofx_evaluate(infx_to_pofx(expression[:-1]))
    if res == "Error":
        t.insert(END, "Syntax Error")
    else:
        t.insert(END , int(res) if (math.floor(res) == math.ceil(res)) else res)                              



####  declare all the buttons
Button_1 = Button(root, text = "1", padx=45, pady=20,font = myFont, command=lambda: on_Click(1))
Button_2 = Button(root, text = "2", padx=45, pady=20,font = myFont, command=lambda: on_Click(2))
Button_3 = Button(root, text = "3", padx=45, pady=20,font = myFont, command=lambda: on_Click(3))
Button_4 = Button(root, text = "4", padx=45, pady=20,font = myFont, command=lambda: on_Click(4))
Button_5 = Button(root, text = "5", padx=45, pady=20,font = myFont, command=lambda: on_Click(5))
Button_6 = Button(root, text = "6", padx=45, pady=20,font = myFont, command=lambda: on_Click(6))
Button_7 = Button(root, text = "7", padx=45, pady=20,font = myFont, command=lambda: on_Click(7))
Button_8 = Button(root, text = "8", padx=45, pady=20,font = myFont, command=lambda: on_Click(8))
Button_9 = Button(root, text = "9", padx=45, pady=20,font = myFont, command=lambda: on_Click(9))
Button_0 = Button(root, text = "0", padx=45, pady=20,font = myFont, command=lambda: on_Click(0))
Button_dot = Button(root, text = ".", padx=48, pady=20, bg='#b3cccc',font = myFont, command=lambda: on_Click("."))
Button_equal = Button(root, text = "=", padx=45, pady=20, bg='#00cc99',font = myFont, command=button_equal)
Button_clear = Button(root, text = "CLR", padx=30, pady=20, bg='#ff4d4d',font = myFont, command=clear)
Button_add = Button(root, text = "+", padx=43, pady=20, bg='#b3cccc',font = myFont, command=lambda: on_Click('+'))
Button_sub = Button(root, text = "-", padx=45, pady=20, bg='#b3cccc',font = myFont, command=lambda: on_Click('-'))
Button_mul = Button(root, text = "*", padx=45, pady=20, bg='#b3cccc',font = myFont, command=lambda: on_Click('*'))
Button_div = Button(root, text = "/", padx=45, pady=20, bg='#b3cccc',font = myFont, command=lambda: on_Click('/'))
Button_backspace = Button(root, text=u"\u232B", padx=34, pady=20, fg= 'red', bg='#b3cccc',font = myFont, command = function_backspace)

Button_left_parenthesis = Button(f1, text = "(", padx=47, pady=2, bg='#b3cccc',font = myFont, command=lambda: on_Click('('))
Button_right_parenthesis= Button(f1, text = ")", padx=47, pady=2, bg='#b3cccc',font = myFont, command=lambda: on_Click(')'))
Button_percentage = Button(root, text = "%", padx=42, pady=20, bg='#b3cccc',font = myFont, command=lambda: on_Click('%'))
####   plot all the buttons on grid
Button_clear.grid(row=1, column=0)
Button_backspace.grid(row=1, column=3)
Button_percentage.grid(row=1, column=2)

Button_1.grid(row=4, column=0)
Button_2.grid(row=4, column=1)
Button_3.grid(row=4, column=2)
Button_4.grid(row=3, column=0)
Button_5.grid(row=3, column=1)
Button_6.grid(row=3, column=2)
Button_7.grid(row=2, column=0)
Button_8.grid(row=2, column=1)
Button_9.grid(row=2, column=2)
Button_0.grid(row=5, column=0)
Button_dot.grid(row=5, column=1)
Button_equal.grid(row=5, column=2)
Button_div.grid(row=2, column=3)
Button_mul.grid(row=3, column=3)
Button_sub.grid(row=4, column=3)
Button_add.grid(row=5, column=3)

f1.grid(row=1, column=1, sticky="nsew")
Button_left_parenthesis.pack(side="top")
Button_right_parenthesis.pack(side="top")

root.mainloop()